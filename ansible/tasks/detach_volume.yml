
---
- name: "initialise tags for {{ volume.Attachments[0].Device }}"
  set_fact:
    volume_tags: {}

- name: "convert tags to a dictionary for {{ volume.Attachments[0].Device }}"
  set_fact:
    volume_tags: "{{ volume_tags | combine({ item.Key: item.Value }) }}"
  loop: "{{ volume.Tags }}"
  loop_control:
    label: "{{ item.Key }}"

- name: "rediscover facts for {{ volume.Attachments[0].Device }}"
  setup: {}

- name: "discover real device for {{ volume.Attachments[0].Device }} (nitro)"
  stat:
    path: "{{ volume.Attachments[0].Device }}"
    follow: no
  register: disk_stat
  when: supervisor == "nitro"

- name: "unmount the partition for {{ volume.Attachments[0].Device }} (nitro)"
  mount:
    path: "/{{ volume_tags['Mount']| default('apps') }}"
    src: "UUID={{ ansible_devices[disk_stat.stat.lnk_target].partitions[disk_stat.stat.lnk_target + 'p1'].uuid }}"
    fstype: "{{ volume_tags['Fs_type']| default('xfs') }}"
    state: "absent"
  when: supervisor == "nitro"

- name: "unmount the partition for {{ volume.Attachments[0].Device }} (legacy)"
  mount:
    path: "/{{ volume_tags['Mount']| default('apps') }}"
    src: "UUID={{ ansible_devices[volume.Attachments[0].Device.split('/')[2]].partitions[volume.Attachments[0].Device.split('/')[2] + '1'].uuid }}"
    fstype: "{{ volume_tags['Fs_type']| default('xfs') }}"
    state: "absent"
  when: supervisor == "legacy"
